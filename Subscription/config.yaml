proxy-providers:
<ProxyProvidersPlaceholder>
proxy-groups:
- name: Auto - UrlTest
  type: url-test
  disable-udp: false
  <UsePlaceholder>
  url: "https://cp.cloudflare.com/generate_204"
  interval: '600'
  tolerance: 100
  filter: U-1X-BGP-HK|Hong|香港
- name: Proxy
  type: select
  proxies:
  - Auto - UrlTest
  - DIRECT
  <UsePlaceholder>
- name: Netflix
  type: select
  disable-udp: false
  proxies:
  - DIRECT
  <UsePlaceholder>
  filter: U-1X-BGP-HK|Hong|香港
- name: Disney
  type: select
  disable-udp: false
  proxies:
  - DIRECT
  <UsePlaceholder>
  filter: U-1X-BGP-HK|Hong|香港
- name: Google
  type: select
  disable-udp: false
  <UsePlaceholder>
  filter: USA|U-1X-BGP-US|美国
- name: Amazon Prime Video
  type: select
  disable-udp: false
  proxies:
  - DIRECT
  <UsePlaceholder>
  filter: USA|U-1X-BGP-US|美国
- name: Others
  type: select
  proxies:
  - DIRECT
  - Proxy
- name: Microsoft
  type: select
  proxies:
  - Proxy
  - DIRECT
- name: OpenAI
  type: select
  proxies:
  - Proxy
  - DIRECT
  <UsePlaceholder>
- name: Apple
  type: select
  proxies:
  - DIRECT
  - Proxy
- name: Apple TV
  type: select
  proxies:
  - Google
  - Proxy
  - DIRECT
  <UsePlaceholder>
  filter: USA|U-1X-BGP-US|美国
- name: Google FCM
  type: select
  proxies:
  - DIRECT
  - Proxy
- name: HBO Max
  type: select
  proxies:
  - DIRECT
  <UsePlaceholder>
- name: Pornhub
  type: select
  proxies:
  - DIRECT
  <UsePlaceholder>
- name: YouTube
  type: select
  disable-udp: true
  proxies:
  - DIRECT
  <UsePlaceholder>
  filter: USA|U-1X-BGP-US|美国
- name: Steam
  type: select
  proxies:
  - Proxy
  - DIRECT
- name: AdBlock
  type: select
  proxies:
  - REJECT
  - DIRECT
  - Proxy
- name: Speedtest
  type: select
  proxies:
  - Proxy
  - DIRECT
  <UsePlaceholder>
- name: Telegram
  type: select
  proxies:
  - Proxy
  - DIRECT
- name: PayPal
  type: select
  proxies:
  - DIRECT
  - Proxy

rules:
- RULE-SET,Reject,AdBlock
- RULE-SET,Special,DIRECT
- RULE-SET,Special+,DIRECT
- RULE-SET,Netflix,Netflix
- RULE-SET,Disney Plus,Disney
- RULE-SET,YouTube,YouTube
- RULE-SET,Amazon Prime Video,Amazon Prime Video
- RULE-SET,HBO Max,HBO Max
- RULE-SET,Pornhub,Pornhub
- RULE-SET,Apple TV,Apple TV
- RULE-SET,Apple TV+,Apple TV
- RULE-SET,Apple,Apple
- RULE-SET,Telegram,Telegram
- RULE-SET,Google FCM,Google FCM
- RULE-SET,Google,Google
- RULE-SET,Microsoft,Microsoft
- RULE-SET,OpenAI,OpenAI
- RULE-SET,PayPal,PayPal
- RULE-SET,Speedtest,Speedtest
- RULE-SET,Steam,Steam
- RULE-SET,FANZA,Pornhub
- RULE-SET,Epic Games,Steam
- RULE-SET,MsftConnectTest,Proxy
- RULE-SET,Pluto TV,Google
- RULE-SET,Amazon+,Amazon Prime Video
##- RULE-SET,Xunlei,REJECT

- RULE-SET,PROXY,Proxy

- RULE-SET,Domestic,DIRECT
- RULE-SET,Domestic IPs,DIRECT

- RULE-SET,LAN,DIRECT
- GEOIP,CN,DIRECT
- MATCH,Others

script:
  code: |
    def main(ctx, metadata):
        ruleset_action = {"Reject": "AdBlock",
            "Special": "DIRECT",
            "Special+": "DIRECT",
            "Netflix": "Netflix",
            "Disney Plus": "Disney",
            "YouTube": "YouTube",
            "Amazon Prime Video": "Amazon Prime Video",
            "HBO Max": "HBO Max",
            "Pornhub": "Pornhub",
            "Apple TV": "Apple TV",
            "Apple TV+": "Apple TV",
            "Apple": "Apple",
            "Telegram": "Telegram",
            "Google FCM": "Google FCM",
            "Google": "Google",
            "Microsoft": "Microsoft",
            "OpenAI": "OpenAI",
            "PayPal": "PayPal",
            "Speedtest": "Speedtest",
            "Steam": "Steam",
            "FANZA": "Pornhub",
            "Epic Games": "Steam",
            "MsftConnectTest": "Proxy",
            "Pluto TV": "Google",
            "Amazon+": "Amazon Prime Video",
            "PROXY": "Proxy",
            "Domestic": "DIRECT",
            "Domestic IPs": "DIRECT",
            "LAN": "DIRECT"
          }

        port = int(metadata["dst_port"])

        if metadata["network"] == "UDP" and port == 443:
            ctx.log('[Script] matched QUIC traffic use reject')
            return "REJECT"

        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 3389, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        if port not in port_list:
            ctx.log('[Script] not common port use direct')
            return "DIRECT"

        if metadata["dst_ip"] == "":
            metadata["dst_ip"] = ctx.resolve_ip(metadata["host"])

        for ruleset in ruleset_action:
            if ctx.rule_providers[ruleset].match(metadata):
                return ruleset_action[ruleset]

        if metadata["dst_ip"] != "":
            code = ctx.geoip(metadata["dst_ip"])
            if code == "CN":
                ctx.log('[Script] Geoip CN')
                return "DIRECT"

        ctx.log('[Script] FINAL')
        return "Others"

rule-providers:
  Reject:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Reject.yaml'
    path: ./Rules/Reject
    interval: 86400
  Special:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Special.yaml'
    path: ./Rules/Special
    interval: 86400
  PROXY:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Proxy/Proxy_Classical.yaml'
    path: ./Rules/Proxy
    interval: 86400
  Domestic:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Domestic.yaml'
    path: ./Rules/Domestic
    interval: 86400
  Domestic IPs:
    type: http
    behavior: ipcidr
    url: 'https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Domestic%20IPs.yaml'
    path: ./Rules/Domestic_IPs
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/LAN.yaml'
    path: ./Rules/LAN
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix_Classical.yaml'
    path: ./Rules/Media/Netflix
    interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml'
    path: ./Rules/Media/YouTube
    interval: 86400
  Amazon Prime Video:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AmazonPrimeVideo/AmazonPrimeVideo.yaml'
    path: ./Rules/Media/Amazon_Prime_video
    interval: 86400
  Apple TV:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AppleTV/AppleTV.yaml'
    path: ./Rules/Media/Apple_TV
    interval: 86400
  Disney Plus:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Disney/Disney.yaml'
    path: ./Rules/Media/Disney_Plus
    interval: 86400
  HBO Max:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/HBO/HBO.yaml'
    path: ./Rules/Media/HBO_Max
    interval: 86400
  Pornhub:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Pornhub.yaml'
    path: ./Rules/Media/Pornhub
    interval: 86400
  Telegram:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml'
    path: ./Rules/Telegram
    interval: 86400
  Steam:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Steam/Steam.yaml'
    path: ./Rules/Steam
    interval: 86400
  Speedtest:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Speedtest/Speedtest.yaml'
    path: ./Rules/Speedtest
    interval: 86400
  PayPal:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PayPal/PayPal.yaml'
    path: ./Rules/PayPal
    interval: 86400
  Microsoft:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.yaml'
    path: ./Rules/Microsoft
    interval: 86400
  OpenAI:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.yaml'
    path: ./Rules/OpenAI
    interval: 86400
  Apple:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Classical.yaml'
    path: ./Rules/Apple
    interval: 86400
  Google FCM:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GoogleFCM/GoogleFCM.yaml'
    path: ./Rules/Google FCM
    interval: 86400
  FANZA:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/lhn1989/Rules/master/Provider/FANZA.yaml'
    path: ./Rules/FANZA
    interval: 86400
  Epic Games:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Epic/Epic.yaml'
    path: ./Rules/Epic Games
    interval: 86400
  MsftConnectTest:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/lhn1989/Rules/master/Provider/MsftConnectTest.yaml'
    path: ./Rules/MsftConnectTest
    interval: 86400
  Pluto TV:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/lhn1989/Rules/master/Provider/Pluto%20TV.yaml'
    path: ./Rules/Pluto TV
    interval: 86400
  Google:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml'
    path: ./Rules/Google
    interval: 86400
  Amazon+:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/lhn1989/Rules/master/Provider/Amazon%2B.yaml'
    path: ./Rules/Amazon+
    interval: 86400
  Apple TV+:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/lhn1989/Rules/master/Provider/Apple%20TV%2B.yaml'
    path: ./Rules/Apple TV+
    interval: 86400
  Xunlei:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/lhn1989/Rules/master/Provider/Xunlei.yaml'
    path: ./Rules/Xunlei
    interval: 86400
  Special+:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/lhn1989/Rules/master/Provider/Special%2B.yaml'
    path: ./Rules/Special+
    interval: 86400
